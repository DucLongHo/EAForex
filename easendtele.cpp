//+------------------------------------------------------------------+
//|                                                  TelegramBot.mq5 |
//|                        Copyright 2024, MetaQuotes Software Corp. |
//|                                                                  |
//+------------------------------------------------------------------+
#property copyright "Copyright 2024"
#property version   "1.00"

//--- Input parameters
input string   TelegramToken = "7996115077:AAEdVxsgNOvpTVIBmW8yZY7ZYAMBEXlipUs"; // Telegram Bot Token
input string   ChatID = "-4700690816"; // Chat ID
input bool     EnableNotifications = true; // B·∫≠t th√¥ng b√°o
input int      DelayBetweenMessages = 1000; // ƒê·ªô tr·ªÖ gi·ªØa c√°c tin nh·∫Øn (ms)
input bool     NotifyOnTrade = true; // Th√¥ng b√°o khi c√≥ giao d·ªãch
input bool     NotifyOnError = true; // Th√¥ng b√°o khi c√≥ l·ªói

//--- Global variables
int lastOrdersCount = 0;
ulong lastDealTicket = 0;

//+------------------------------------------------------------------+
const int TIME_VN = 7*3600; // Gi·ªù Vi·ªát Nam
//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit(){
    // Ki·ªÉm tra k·∫øt n·ªëi Internet
    if(!TerminalInfoInteger(TERMINAL_CONNECTED)){
        Print("Dont connect internet!");
        return(INIT_FAILED);
    }
    
    // L·∫•y deal cu·ªëi c√πng ƒë·ªÉ tr√°nh th√¥ng b√°o l·ªãch s·ª≠ c≈©
    if(HistorySelect(0, TimeCurrent())){
        int totalDeals = HistoryDealsTotal();
        if(totalDeals > 0){
            lastDealTicket = HistoryDealGetTicket(totalDeals - 1);
        }
    }
    
    // G·ª≠i th√¥ng b√°o kh·ªüi ƒë·ªông
    if(EnableNotifications){
        string startMessage = "ü§ñ EA ƒê√É KH·ªûI ƒê·ªòNG\n";
        startMessage += "üíª Server: " + AccountInfoString(ACCOUNT_SERVER) + "\n";
        startMessage += "üë§ T√†i kho·∫£n: " + IntegerToString(AccountInfoInteger(ACCOUNT_LOGIN)) + "\n";
        startMessage += "‚è∞ Timeframe: " + TimeToString(TimeCurrent() + TIME_VN, TIME_DATE|TIME_SECONDS) + "\n";
        
        SendTelegramMessage(startMessage);
    }
    
    lastOrdersCount = PositionsTotal();
    
    return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick(){
    static datetime lastCheck = 0;
    
    // Ki·ªÉm tra m·ªói 1 gi√¢y
    if(TimeCurrent() - lastCheck >= 1){
        if(NotifyOnTrade){
            CheckForNewPositions();
            CheckForNewDeals();
        }
        lastCheck = TimeCurrent();
    }
}

//+------------------------------------------------------------------+
//| H√†m ki·ªÉm tra position m·ªõi                                       |
//+------------------------------------------------------------------+
void CheckForNewPositions(){
    int currentPositions = PositionsTotal();
    
    if(currentPositions != lastOrdersCount){
        if(currentPositions > lastOrdersCount){
            // C√≥ position m·ªõi ƒë∆∞·ª£c m·ªü
            CheckNewOpenedPositions();
        }
        
        lastOrdersCount = currentPositions;
    }
}

//+------------------------------------------------------------------+
//| Ki·ªÉm tra position m·ªõi m·ªü                                        |
//+------------------------------------------------------------------+
void CheckNewOpenedPositions(){
    for(int index = PositionsTotal() - 1; index >= 0; index--){
        ulong ticket = PositionGetTicket(index);
        if(PositionSelectByTicket(ticket)){
            string symbol = PositionGetString(POSITION_SYMBOL);
            long positionTime = PositionGetInteger(POSITION_TIME);
            
            // Ch·ªâ th√¥ng b√°o position m·ªü trong 10 gi√¢y g·∫ßn nh·∫•t
            if(TimeCurrent() - positionTime <= 10){
                string message = "üéØ POSITION M·ªöI\n";
                message += "C·∫∑p: " + symbol + "\n";
                message += "Lo·∫°i: " + GetPositionTypeString((ENUM_ORDER_TYPE)PositionGetInteger(POSITION_TYPE)) + "\n";
                message += "Kh·ªëi l∆∞·ª£ng: " + DoubleToString(PositionGetDouble(POSITION_VOLUME), 2) + "\n";
                message += "Gi√° v√†o: " + DoubleToString(PositionGetDouble(POSITION_PRICE_OPEN), (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS)) + "\n";
                message += "SL: " + FormatPriceLevel(symbol, PositionGetDouble(POSITION_SL)) + "\n";
                message += "TP: " + FormatPriceLevel(symbol, PositionGetDouble(POSITION_TP)) + "\n";
                message += "Th·ªùi gian: " + TimeToString(positionTime + TIME_VN, TIME_DATE|TIME_MINUTES);
                SendTelegramMessage(message);
                Sleep(DelayBetweenMessages);
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Ki·ªÉm tra deal m·ªõi                                               |
//+------------------------------------------------------------------+
void CheckForNewDeals(){
    if(HistorySelect(0, TimeCurrent())){
        int totalDeals = HistoryDealsTotal();

        for(int index = 0; index < totalDeals; index++){
            ulong dealTicket = HistoryDealGetTicket(index);
            
            // Ch·ªâ x·ª≠ l√Ω deal m·ªõi
            if(dealTicket > lastDealTicket){
                ProcessNewDeal(dealTicket);
                lastDealTicket = dealTicket;
            }
        }
    }
}

//+------------------------------------------------------------------+
//| X·ª≠ l√Ω deal m·ªõi                                                  |
//+------------------------------------------------------------------+
void ProcessNewDeal(ulong dealTicket){
    if(HistoryDealGetInteger(dealTicket, DEAL_ENTRY) == DEAL_ENTRY_OUT){
        string message = "‚úÖ POSITION ƒê√ìNG\n";
        message += "C·∫∑p: " + HistoryDealGetString(dealTicket, DEAL_SYMBOL) + "\n";
        message += "Kh·ªëi l∆∞·ª£ng: " + DoubleToString(HistoryDealGetDouble(dealTicket, DEAL_VOLUME), 2) + "\n";
        message += "L·ª£i nhu·∫≠n: " + DoubleToString(HistoryDealGetDouble(dealTicket, DEAL_PROFIT), 2) + " " + AccountInfoString(ACCOUNT_CURRENCY) + "\n";
        message += "Th·ªùi gian: " + TimeToString(HistoryDealGetInteger(dealTicket, DEAL_TIME) + TIME_VN, TIME_DATE|TIME_MINUTES);
        
        SendTelegramMessage(message);
        Sleep(DelayBetweenMessages);
    }
}

//+------------------------------------------------------------------+
//| H√†m g·ª≠i tin nh·∫Øn Telegram                                       |
//+------------------------------------------------------------------+
bool SendTelegramMessage(string message){
    string headers = "Content-Type: application/x-www-form-urlencoded";
    char data[], result[];
    string url = "https://api.telegram.org/bot" + TelegramToken + "/sendMessage";
    
    string request = "chat_id=" + ChatID + "&text=" + message;
    
    // Reset last error
    ResetLastError();
    
    // Chuy·ªÉn ƒë·ªïi string sang m·∫£ng char
    int datalen = StringToCharArray(request, data, 0, WHOLE_ARRAY, CP_UTF8);
    if(datalen <= 0){
        if(NotifyOnError) Print("L·ªói chuy·ªÉn ƒë·ªïi string to char array");
        return false;
    }
    
    // G·ª≠i request POST
    int res = WebRequest("POST", url, headers, 5000, data, result, headers);
    
    if(res == -1){
        int errorCode = GetLastError();
        
        if(NotifyOnError){
            string errorMessage = "‚ùå L·ªói g·ª≠i Telegram: " + IntegerToString(errorCode) + "\n";
            errorMessage += "M√£ l·ªói: " + GetWebErrorDescription(errorCode);
            Print(errorMessage);
        }
        return false;
    }
    
    return true;
}

//+------------------------------------------------------------------+
//| H√†m l·∫•y m√¥ t·∫£ l·ªói WebRequest                                    |
//+------------------------------------------------------------------+
string GetWebErrorDescription(int errorCode){
    switch(errorCode)
    {
        case 4001: return "L·ªói k·∫øt n·ªëi - kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server";
        case 4002: return "L·ªói k·∫øt n·ªëi - kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu";
        case 4003: return "L·ªói k·∫øt n·ªëi - kh√¥ng th·ªÉ nh·∫≠n d·ªØ li·ªáu";
        case 4004: return "L·ªói k·∫øt n·ªëi - timeout";
        case 4010: return "URL kh√¥ng ƒë∆∞·ª£c ph√©p (ch∆∞a th√™m v√†o danh s√°ch cho ph√©p)";
        case 4012: return "Kh√¥ng th·ªÉ m·ªü file";
        case 4013: return "L·ªói ghi file";
        case 4014: return "L·ªói ƒë·ªçc file";
        case 4015: return "L·ªói chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu";
        case 4016: return "L·ªói k·∫øt n·ªëi - kh√¥ng th·ªÉ x√°c th·ª±c server";
        default: return "L·ªói kh√¥ng x√°c ƒë·ªãnh";
    }
}

//+------------------------------------------------------------------+
//| H√†m chuy·ªÉn ƒë·ªïi lo·∫°i position th√†nh string                       |
//+------------------------------------------------------------------+
string GetPositionTypeString(ENUM_ORDER_TYPE orderType){

    // X√°c ƒë·ªãnh lo·∫°i l·ªánh
    switch(orderType){
        case ORDER_TYPE_BUY: return "L·ªÜNH MUA";
        case ORDER_TYPE_SELL: return "L·ªÜNH B√ÅN";
        case ORDER_TYPE_BUY_LIMIT: return "L·ªÜNH MUA LIMIT";
        case ORDER_TYPE_SELL_LIMIT: return "L·ªÜNH B√ÅN LIMIT";
        case ORDER_TYPE_BUY_STOP: return "L·ªÜNH MUA STOP";
        case ORDER_TYPE_SELL_STOP: return "L·ªÜNH B√ÅN STOP";
        default: return "L·ªÜNH KH√ÅC";
    }

    return "";
}

//+------------------------------------------------------------------+
//| ƒê·ªãnh d·∫°ng m·ª©c gi√° (SL/TP)                                       |
//+------------------------------------------------------------------+
string FormatPriceLevel(string symbol, double price){
    if(price == 0) return "Ch∆∞a ƒë·∫∑t";
    
    int digits = (int)SymbolInfoInteger(symbol, SYMBOL_DIGITS);
    return DoubleToString(price, digits);
}

//+------------------------------------------------------------------+
//| H√†m deinitialization                                            |
//+------------------------------------------------------------------+
void OnDeinit(const int reason){
    if(EnableNotifications)
    {
        string stopMessage = "üõë EA Telegram Bot MT5 ƒê√É D·ª™NG\n";
        stopMessage += "L√Ω do: " + GetUninitReasonText(reason) + "\n";
        stopMessage += "C·∫∑p ti·ªÅn: " + Symbol() + "\n";
        stopMessage += "Th·ªùi gian: " + TimeToString(TimeCurrent(), TIME_DATE|TIME_MINUTES);
        
        SendTelegramMessage(stopMessage);
    }
}

//+------------------------------------------------------------------+
//| H√†m l·∫•y l√Ω do deinit                                            |
//+------------------------------------------------------------------+
string GetUninitReasonText(int reasonCode){
    switch(reasonCode)
    {
        case REASON_ACCOUNT:     return "T√†i kho·∫£n thay ƒë·ªïi";
        case REASON_CHARTCHANGE: return "Chart thay ƒë·ªïi";
        case REASON_CHARTCLOSE:  return "Chart ƒë√≥ng";
        case REASON_PARAMETERS:  return "Tham s·ªë thay ƒë·ªïi";
        case REASON_RECOMPILE:   return "EA ƒë∆∞·ª£c bi√™n d·ªãch l·∫°i";
        case REASON_REMOVE:      return "EA b·ªã x√≥a";
        case REASON_TEMPLATE:    return "Template thay ƒë·ªïi";
        case REASON_INITFAILED:  return "Kh·ªüi t·∫°o th·∫•t b·∫°i";
        case REASON_CLOSE:       return "Platform ƒë√≥ng";
        default:                 return "L√Ω do kh√°c";
    }
}

//+------------------------------------------------------------------+
//| H√†m TradeEvent (x·ª≠ l√Ω s·ª± ki·ªán giao d·ªãch)                       |
//+------------------------------------------------------------------+
void OnTrade(){
    if(NotifyOnTrade)
    {
        // X·ª≠ l√Ω real-time trade events
        CheckForNewPositions();
        CheckForNewDeals();
    }
}